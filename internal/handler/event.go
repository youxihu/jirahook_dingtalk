package handler

import (
	"whenchangesth/pkg"
)

// getAllEvents 返回所有支持的事件类型
func getAllEvents() []pkg.Event {
	return []pkg.Event{
		pkg.StatusTransitionEvent,
		pkg.IssueCreatedEvent,
		pkg.IssueDeletedEvent,
		pkg.IssueUpdatedEvent,
		pkg.IssueWorkLogEvent,
		pkg.WorkLogCreatedEvent,
		pkg.WorkLogUpdatedEvent,
		pkg.WorkLogDeletedEvent,
		pkg.CommentCreatedEvent,
		pkg.CommentUpdatedEvent,
		pkg.CommentDeletedEvent,
		pkg.LinkCreatedEvent,
		pkg.LinkDeletedEvent,
		pkg.UserCreatedEvent,
		pkg.UserUpdatedEvent,
		pkg.UserDeletedEvent,
		pkg.ProjectCreatedEvent,
		pkg.ProjectUpdatedEvent,
		pkg.ProjectDeletedEvent,
		pkg.ProjectArchivedEvent,
		pkg.ProjectRestoredEvent,
		pkg.BoardCreatedEvent,
		pkg.BoardUpdatedEvent,
		pkg.BoardDeletedEvent,
		pkg.BoardConfigurationChangedEvent,
		pkg.SprintCreatedEvent,
		pkg.SprintUpdatedEvent,
		pkg.SprintDeletedEvent,
		pkg.SprintStartedEvent,
		pkg.SprintClosedEvent,
		pkg.VersionCreatedEvent,
		pkg.VersionUpdatedEvent,
		pkg.VersionDeletedEvent,
		pkg.VersionReleasedEvent,
		pkg.VersionUnreleasedEvent,
		pkg.OptionTimeTrackingChangedEvent,
		pkg.OptionIssueLinksChangedEvent,
		pkg.OptionSubTasksChangedEvent,
		pkg.OptionAttachmentsChangedEvent,
		pkg.OptionWatchingChangedEvent,
		pkg.OptionVotingChangedEvent,
		pkg.OptionUnassignedIssuesChangedEvent,
	}
}

// 定义事件处理器类型
type EventHandler func(interface{}) error

// eventHandlers 是事件类型到处理器的映射表
var eventHandlers = map[pkg.Event]EventHandler{
	//pkg.StatusTransitionEvent: handleStatusTransition,
	pkg.IssueCreatedEvent: handleIssueCreated,
	pkg.IssueDeletedEvent: handleIssueDeleted,
	pkg.IssueUpdatedEvent: handleIssueUpdated,
	//pkg.IssueWorkLogEvent:               handleIssueWorkLog,
	//pkg.WorkLogCreatedEvent:             handleWorkLogCreated,
	//pkg.WorkLogUpdatedEvent:             handleWorkLogUpdated,
	//pkg.WorkLogDeletedEvent:             handleWorkLogDeleted,
	//pkg.CommentCreatedEvent: handleCommentCreated,
	//pkg.CommentUpdatedEvent:             handleCommentUpdated,
	//pkg.CommentDeletedEvent:             handleCommentDeleted,
	//pkg.LinkCreatedEvent:                handleLinkCreated,
	//pkg.LinkDeletedEvent:                handleLinkDeleted,
	//pkg.UserCreatedEvent:                handleUserCreated,
	//pkg.UserUpdatedEvent:                handleUserUpdated,
	//pkg.UserDeletedEvent:                handleUserDeleted,
	//pkg.ProjectCreatedEvent:             handleProjectCreated,
	//pkg.ProjectUpdatedEvent:             handleProjectUpdated,
	//pkg.ProjectDeletedEvent:             handleProjectDeleted,
	//pkg.ProjectArchivedEvent:            handleProjectArchived,
	//pkg.ProjectRestoredEvent:            handleProjectRestored,
	//pkg.BoardCreatedEvent:               handleBoardCreated,
	//pkg.BoardUpdatedEvent:               handleBoardUpdated,
	//pkg.BoardDeletedEvent:               handleBoardDeleted,
	//pkg.BoardConfigurationChangedEvent:  handleBoardConfigurationChanged,
	//pkg.SprintCreatedEvent:              handleSprintCreated,
	//pkg.SprintUpdatedEvent:              handleSprintUpdated,
	//pkg.SprintDeletedEvent:              handleSprintDeleted,
	//pkg.SprintStartedEvent:              handleSprintStarted,
	//pkg.SprintClosedEvent:               handleSprintClosed,
	//pkg.VersionCreatedEvent:             handleVersionCreated,
	//pkg.VersionUpdatedEvent:             handleVersionUpdated,
	//pkg.VersionDeletedEvent:             handleVersionDeleted,
	//pkg.VersionReleasedEvent:            handleVersionReleased,
	//pkg.VersionUnreleasedEvent:          handleVersionUnreleased,
	//pkg.OptionTimeTrackingChangedEvent:  handleOptionTimeTrackingChanged,
	//pkg.OptionIssueLinksChangedEvent:    handleOptionIssueLinksChanged,
	//pkg.OptionSubTasksChangedEvent:      handleOptionSubTasksChanged,
	//pkg.OptionAttachmentsChangedEvent:   handleOptionAttachmentsChanged,
	//pkg.OptionWatchingChangedEvent:      handleOptionWatchingChanged,
	//pkg.OptionVotingChangedEvent:        handleOptionVotingChanged,
	//pkg.OptionUnassignedIssuesChangedEvent: handleOptionUnassignedIssuesChanged,
}
